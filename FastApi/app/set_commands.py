from markup_keyboard import reply_markups


class SetCommand:
    def __init__(self, chat_storage, tg_api):
        self.chat_storage = chat_storage
        self.tg_api = tg_api

    async def post_command(self, message_text, chat_id, user_id, chat_user):
        commands = {
            '/profile': self.handle_profile,
            '/killprofile': self.handle_killprofile,
            '/refresh': self.handle_refresh,
            '/history': self.handle_history,
            '/start': self.handle_start
        }

        command = commands.get(message_text)
        if command:
            await command(chat_id, user_id, chat_user)
            return {'ok': True}
        elif message_text == '':
            return Response(content='True', media_type='text/plain')
        else:
            return False

    async def handle_profile(self, chat_id, user_id, chat_user):
            try:
                profile = self.chat_storage.get_profile(user_id)
                if profile == None:
                    await self.tg_api.send_message(chat_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    profile_dict = profile
                    formatted_profile = f'–ò–º—è: {profile_dict["first_name"]}\n' \
                                        f'Username: {profile_dict["username"]}\n' \
                                        f'–ö–æ–¥ —è–∑—ã–∫–∞: {profile_dict["language_code"]}\n' \
                                        f'Chat ID: {profile_dict["chat_id"]}\n' \
                                        f'–ú–æ–¥–µ–ª—å GPT: ChatGPT-3.5-turbo\n' \
                                        f'–ö–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {profile_dict["token_summ"]}'
                    reply_markup = reply_markups[1] if profile['language_audio_mode'] == "ru-RU" else reply_markups[2]
                    await self.tg_api.send_message(chat_id, message_text=formatted_profile, reply_markup=reply_markup)
                return {'ok': True}
            except Exception as e:
                await self.tg_api.send_message(chat_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.{e}')
                return {'ok': True}

    async def handle_killprofile(self, chat_id, user_id, chat_user):
        self.chat_storage.delete_profile(user_id)
        await self.tg_api.send_message(chat_id, 'ü´°–ê–Ω–æ–Ω–∏–º—É—Å, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ωü´°')

    async def handle_refresh(self, chat_id, user_id, chat_user):
        self.chat_storage.remove_message_from_chat(chat_user)
        await self.tg_api.send_message(chat_id, '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞üòâ')

    async def handle_history(self, chat_id, user_id, chat_user):
        user_history = self.chat_storage.get_chat_history(chat_user)
        history_string = '–ö–æ–Ω—Ç–µ–∫c—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏: \n'
        for message in user_history:
            role = message['role']
            content = message['content']
            scontent = f"\n\n{role}: {content}" 
            history_string += scontent
                   
        if len(history_string) > 3500:
            MAX_MESSAGE_LENGTH = 3500
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
            num_parts = (len(history_string) - 1) // MAX_MESSAGE_LENGTH + 1
            for i in range(num_parts):
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏
                start = i * MAX_MESSAGE_LENGTH
                end = (i + 1) * MAX_MESSAGE_LENGTH
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å, —Ç–æ –±–µ—Ä–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
                if i == num_parts - 1:
                    end = len(history_string)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥–Ω—É—é —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ Telegram
                await self.tg_api.send_message(chat_id, message_text=history_string[start:end])
        else:
            await self.tg_api.send_message(chat_id, str(user_history))

    async def handle_start(self, chat_id, user_id, chat_user):
        message_text = f'–ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT by @TopFemka.\n' \
            f'–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É - –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é —è\n\n' \
            f'üß† /refresh - —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n' \
            f'üë§ /profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å \n' \
            f'üìù /history - –∫–æ–Ω—Ç–µ–∫—Å—Ç \n\n' \
            f'–í—Å–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
        await self.tg_api.send_message(chat_id, message_text=message_text)
